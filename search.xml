<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[CORS (跨域资源共享)]]></title>
      <url>/2017/08/27/cors%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB/</url>
      <content type="html"><![CDATA[<h3 id="jsonp的缺陷"><a href="#jsonp的缺陷" class="headerlink" title="jsonp的缺陷"></a>jsonp的缺陷</h3><p>1)只能进行GET请求<br>2)缺乏有效的错误捕获机制。因此在XMLHttpRequest v2标准下，提出了CORS(Cross Origin Resourse-Sharing)的模型，试图保证跨域请求的安全性。</p>
<h3 id="CORS-跨域资源共享"><a href="#CORS-跨域资源共享" class="headerlink" title="CORS(跨域资源共享)"></a>CORS(跨域资源共享)</h3><p>CORS（Cross-Origin Resource Sharing）是W3C在05年提出的跨域资源请求机制，它要求当前域（常规为存放资源的服务器）在响应报头添加Access-Control-Allow-Origin标签，从而允许指定域的站点访问当前域上的资源，客户端的实现跟常规的请求没啥出入，不过CORS默认只支持GET/POST这两种http请求类型，如果要开启PUT/DELETE之类的方式，需要在服务端在添加一个”Access-Control-Allow-Methods”报头标签(ie6,7不行！)<br><a id="more"></a></p>
<h4 id="CORS兼容性"><a href="#CORS兼容性" class="headerlink" title="CORS兼容性"></a>CORS兼容性</h4><p><img src="/imgs/cors.png" width="700" height="300"><br>IE使用XDomainRequest，实现了cors的部分规范，请求只支持GET和POST，协议只支持http和https，XDomainRequest()只接受两个参数method和url，所有请求都是异步执行的的，不能创建同步请求，触发load事件，访问的数据保存在responseText中。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xdr = <span class="keyword">new</span> XDomainRequest();</div><div class="line">		xdr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="built_in">console</span>.log(xdr.responseText);</div><div class="line">		&#125;</div><div class="line">		xdr.open(<span class="string">'GET'</span>, <span class="string">'www.baidu.com'</span>);</div><div class="line">		xdr.send(<span class="literal">null</span>);</div></pre></td></tr></table></figure></p>
<p>其他浏览器使用XMLHttpRequest level2</p>
<h4 id="CORS实现跨域"><a href="#CORS实现跨域" class="headerlink" title="CORS实现跨域"></a>CORS实现跨域</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">creatCORS</span>(<span class="params">method, url, flag</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> cors = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">	<span class="keyword">if</span> (<span class="string">'withCredentials'</span> <span class="keyword">in</span> cors) &#123;</div><div class="line">            <span class="comment">//XMLHttpRequest level2 独有的属性				</span></div><div class="line">            <span class="comment">//标准的CORS请求，默认情况下是不会发送或者设置cookie值的。为了再请求时，附带cookies，我们需要设置XMLHttpRequest的withCredentials属性为true</span></div><div class="line">		cors.open(method, url, flag);</div><div class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> XDomainRequest != <span class="string">'undefined'</span>) &#123;</div><div class="line">          <span class="comment">//兼容ie8+</span></div><div class="line">		cors = <span class="keyword">new</span> XDomainRequest();</div><div class="line">		cors.open(method, url);</div><div class="line">	&#125;<span class="keyword">else</span> &#123;</div><div class="line">		cors = <span class="literal">null</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> cors;</div><div class="line">&#125;</div><div class="line">      <span class="comment">//创建cors请求</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeCorsRequest</span>(<span class="params">method, url, flag, callBack</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> cors = creatCORS(method, url, flag);</div><div class="line">	<span class="keyword">if</span> (!cors) &#123;</div><div class="line">		alert(<span class="string">'CORS is not supported'</span>);</div><div class="line">	&#125;</div><div class="line">	cors.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		callBack(cors.responseText);</div><div class="line">	&#125;</div><div class="line">	cors.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'CORS error!'</span>);</div><div class="line">	&#125;</div><div class="line">	cors.send();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 网络 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 跨域 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[百度贴吧面试总结]]></title>
      <url>/2017/08/20/%E8%B4%B4%E5%90%A7%E9%9D%A2%E8%AF%95/</url>
      <content type="html"><![CDATA[<p>总结一下前天百度贴吧的面试：<br>1.你最喜欢或者最值得骄傲的项目，遇到了什么困难，怎么解决的。<br>2.移动端屏幕的相关配置：<br>    屏幕自适应<br>    回答到： 用meta标签viewport 问了具体的viewport里的每一个属性以及功能。<br>            css3的弹性盒子 问了css3的应用以及三列布局<br><a id="more"></a><br>            媒体查询 反问了bootstrop 的栅格布局的源码实现 -&gt; bootstrop 的属性代表的设备屏幕的意义：<br>                                xs –&gt; phone<br>                                sm –&gt; tablet<br>                                默认 –&gt; pc<br>                                lg –&gt; 宽屏</p>
<p>3.react的生命周期的整体描述，每一个状态的具体应用和联系，ajax在哪个状态使用，setState()的第二个参数有什么作用？怎样防止无意义的渲染<br>4.es6的一系列问的很全 每一方面的扩展都问了一些：  let和const的区别，块级作用域？<br>                                              箭头函数和普通函数的区别，什么时候使用，let a = b =&gt; c=&gt; 1; a(); 的执行结果<br>5.web性能优化：设计方面和代码方面<br>           减少http请求和 缓存答了一堆，就开始问我http的一些问题 请求图片会在请求头返回什么 （还有一些关于http协议的问题没弄懂，这方面掌握的不好）<br>           代码方面尽量减少dom操作，同时减少dom的属性访问（eg：遍历前把长度获取好：var len = ele.length;），<br>           字符串拼接尽量不要用 ‘+’ 拼接，放到数组里然后使用join方法（后来大佬告诉我现在 ‘+’ 拼接字符串已经优化了）<br>6.网络安全知道多少？ 几种典型的网络攻击，如何解决？<br>7.javaScript事件线：问的很细，问了每一步对应的状态变化<br>8.jQuery源码看过之后掌握了多少，属性选择器，使用过那些jquery插件？<br>9.跨域方法和jsonP原理（问到后面就不会了）<br>  1）发送jsonp请求时怎样了解数据获取的状态<br>  2）jsonP的 response 的格式要求是什么（完全懵掉了） 后来他告诉我是一段js代码，不只是数据本身<br>  3）ajax实现跨域的方法： 我答的是jQurey的ajax方法可以使用jsonp，他跟我说还有cors，让我看看<br>  4）问了一下fetch：不一定能实现跨域，能不能跨域要看服务器：怎么表示服务器允许跨域？<br>  5）eTag, 过期时间（完全不会）<br>10.使用过那些自动化构建工具： webpack: webpack有哪些优点，配置文件，webpack实现兼容是自身就能实现还是通过下载的依赖，每一种文件对应的loader是什么？<br>11.移动端的视网膜屏幕怎样适配（像素问题）<br>问的很多很全，网络那块问的很深，一个问题引导出下一个问题，so千万别把面试官引导到自己不熟悉的内容<br>总结：从提高性能那里逐渐延伸问很多的网络问题： 缓存，http协议和网络安全那里了解的不够（整场面试败在了网络）<br>算法题： 1. arr = [1, 2, 3, … 100]; 怎样随机抽取10个不重复的数？<br>        2.有九个随机数，设计一个算法将其分成三组，使三组组的和尽量相等？<br>百度fex，下学期再战！</p>
]]></content>
      
        <categories>
            
            <category> 其他 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello my personal blog！]]></title>
      <url>/2017/08/20/Hello/</url>
      <content type="html"><![CDATA[<blockquote>
<p>2017年8月20日，今天是我搭建个人博客的第一天！此后将不定期的更新自己的一些想法和一些知识点的总结，一边记录一边成长！</p>
</blockquote>
]]></content>
      
        
    </entry>
    
  
  
</search>
